#!/usr/bin/env python
"""Periodic cleaning of infrastructure and the database"""

from __future__ import print_function
import configparser
import logging
from logging.handlers import RotatingFileHandler
import re
import os
import sys
import time

from imc import config
from imc import database
from imc import destroy
from imc import imclient
from imc import opaclient
from imc import tokens
from imc import utilities

# Configuration
CONFIG = config.get_config()

# Logging
handler = RotatingFileHandler(filename=CONFIG.get('logs', 'filename').replace('.log', '-cleaner.log'),
                              maxBytes=int(CONFIG.get('logs', 'max_bytes')),
                              backupCount=int(CONFIG.get('logs', 'num')))
formatter = logging.Formatter('%(asctime)s %(levelname)s [%(name)s] %(message)s')
handler.setFormatter(formatter)
logger = logging.getLogger('checks')
logger.addHandler(handler)
logger.setLevel(logging.INFO)

def find_unexpected_im_infras(db):
    """
    Find IM infrastructures which should not exist
    """
    # Get full list of cloud info
    clouds_info_list = utilities.create_clouds_list(CONFIG.get('clouds', 'path'))

    # Get list of IM infrastructure IDs
    im_auth = utilities.create_im_auth(None, None, clouds_info_list)
    client = imclient.IMClient(url=CONFIG.get('im', 'url'), data=im_auth)
    (status, msg) = client.getauth()
    if status != 0:
        logger.critical('Error reading IM auth file: %s', msg)
        return False
    (status, ids) = client.list_infra_ids(10)

    if ids:
        for uri in ids:
            pieces = uri.split('/')
            im_id = pieces[len(pieces) - 1]

            # Check if we know about the infrastructure
            (infra_id, status, cloud) = db.get_infra_from_im_infra_id(im_id)
            if not infra_id:
                logger.info('Found unknown infrastructure with IM ID %s', im_id)
                (data, _) = client.getdata(im_id, 10)
                if data:
                    my_infra_id = None
                    extract_infra_id = re.search("PROMINENCE_INFRASTRUCTURE_ID=([0-9a-f]{8}-[0-9a-f]{4}-[4][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12})", data['data'])
                    if extract_infra_id:
                        my_infra_id = extract_infra_id.group(1)
                        (_, my_infra_status, _, _, _) = db.deployment_get_im_infra_id(my_infra_id)
                        logger.info('- this IM infrastructure is associated with my infrastructure id %s which has status %s', my_infra_id, my_infra_status)

                        if my_infra_status in ('deleted', 'deleting', 'deletion-failed', 'deletion-required', 'unable'):
                            for cloud_info in clouds_info_list:
                                if cloud_info['name'] in data['data']:
                                    logger.info('- found unknown IM id %s on cloud %s, deleting...', im_id, cloud_info['name'])
                                    if delete_from_im(im_id, cloud_info['name']):
                                        logger.info('- successfully deleted infrastructure with IM id %s on cloud %s', im_id, cloud_info['name'])
                                    break
                    else:
                        logger.info('- could not get my associated infrastructure id')

def retry_incomplete_deletions(db, state):
    """
    Retry failed deletions
    """
    infras = db.deployment_get_infra_in_state_cloud(state) 
    logger.info('Found %d infrastructures in state %s', len(infras), state)
    for infra in infras:
        if time.time() - infra['updated'] > int(CONFIG.get('cleanup', 'retry_failed_deletes_after')):
            logger.info('Attempting to delete infra with ID %s', infra['id'])
            if destroy.delete(infra['id']):
                logger.info('Successfully deleted infrastructure with ID %s', infra['id'])

def remove_old_entries(db, state):
    """
    Remove old entries from the DB
    """
    infras = db.deployment_get_infra_in_state_cloud(state)
    logger.info('Found %d infrastructures in state %s', len(infras), state)
    for infra in infras:
        if time.time() - infra['updated'] > int(CONFIG.get('cleanup', 'remove_after')):
            logger.info('Removing infrastructure %s from DB', infra['id'])
            db.deployment_remove(infra['id'])

def delete_stuck_infras(db, state):
    """
    Delete any infras stuck in the accepted or creating state
    """
    infras = db.deployment_get_infra_in_state_cloud(state)
    logger.info('Found %d infrastructures in state %s', len(infras), state)
    for infra in infras:
        if time.time() - infra['updated'] > int(CONFIG.get('cleanup', 'delete_stuck_infras_after')):
            logger.info('Setting status of infrastructure %s to deleted', infra['id'])
            db.deployment_update_status_with_retries(unique_id, 'deletion-requested')
            db.deployment_update_status_reason(unique_id, 'DeploymentFailed')

def delete_from_im(im_infrastructure_id, cloud):
    """
    Delete infrastructure from IM
    """
    db = database.get_db()
    if db.connect():
        clouds_info_list = utilities.create_clouds_list(CONFIG.get('clouds', 'path'))
        token = tokens.get_token(cloud, None, db, clouds_info_list)
        db.close()
        im_auth = utilities.create_im_auth(cloud, token, clouds_info_list)
        client = imclient.IMClient(url=CONFIG.get('im', 'url'), data=im_auth)
        (status, msg) = client.getauth()
        if status != 0:
            logger.critical('Error reading IM auth file: %s', msg)
            return False
        (status, _) = client.destroy(im_infrastructure_id, 60)
        if status == 0:
            return True
        return False

if __name__ == "__main__":
    while True:
        db = database.get_db()
        if db.connect():
            logger.info('Removing old failure events from Open Policy Agent')
            opa_client = opaclient.OPAClient(url=CONFIG.get('opa', 'url'), timeout=int(CONFIG.get('opa', 'timeout')))
            opa_client.remove_old_failures()

            logger.info('Checking for unexpected IM infrastructures')
            find_unexpected_im_infras(db)

            logger.info('Retrying any incomplete deletions')
            retry_incomplete_deletions(db, 'deletion-failed')
            retry_incomplete_deletions(db, 'deleting')
            retry_incomplete_deletions(db, 'deletion-requested')

            logger.info('Removing any old entries from the DB')
            remove_old_entries(db, 'deleted')
            remove_old_entries(db, 'unable')

            logger.info('Checking for infrastructure stuck in the accepted and creating states')
            delete_stuck_infras(db, 'accepted')
            delete_stuck_infras(db, 'creating')
        
            db.close()

        time.sleep(3600)
