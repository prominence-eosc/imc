#!/usr/bin/env python
"""Runs infrastructure deploy and destroy workers"""

from __future__ import print_function
from concurrent.futures import ProcessPoolExecutor
import logging
from logging.handlers import RotatingFileHandler
import signal
import time

from imc import database
from imc import utilities
from imc import deployer
from imc import destroyer

# Configuration
CONFIG = utilities.get_config()

# Logging
handler = RotatingFileHandler(filename=CONFIG.get('logs', 'filename').replace('.log', '-manager.log'),
                              maxBytes=int(CONFIG.get('logs', 'max_bytes')),
                              backupCount=int(CONFIG.get('logs', 'num')))
formatter = logging.Formatter('%(asctime)s %(levelname)s [%(name)s] %(message)s')
handler.setFormatter(formatter)
logger = logging.getLogger('manager')
logger.addHandler(handler)
logger.setLevel(logging.INFO)

# Initialize DB if necessary
dbi = database.get_db()
dbi.init()

EXIT_NOW = False

def handle_signal(signum, frame):
    """
    Handle signals
    """
    global EXIT_NOW
    EXIT_NOW = True
    logger.info('Received signal %d, shutting down...', signum)

def find_new_infra_for_creation(db, executor):
    """
    Find infrastructure to be deployed
    """
    # Get all new infrastructures to deploy
    infras = db.deployment_get_infra_in_state_cloud('accepted', order=True)

    # Include any infrastructures which have been in the waiting state for long enough
    infras_waiting = db.deployment_get_infra_in_state_cloud('waiting', order=True)
    for infra in infras_waiting:
        if time.time() - infra['updated'] > 15*60:
            infras.append(infra)
            
    current_deployers = 0
    num_not_run = 0

    logger.info('Found %d infrastructures to deploy', len(infras))

    for infra in infras:
        if current_deployers + 1 < int(CONFIG.get('pool', 'deployers')):
            if infra['state']
            logger.info('Running deploying for infra %s', infra['id'])
            executor.submit(deployer.deployer, infra['id'])
            current_deployers += 1
        else:
            num_not_run += 1

    if num_not_run > 0:
        logger.info('Not running %d deployers as we already have enough', num_not_run)

def find_new_infra_for_deletion(db, executor):
    """
    Find infrastructure to be destroyed
    """
    infras = db.deployment_get_infra_in_state_cloud('deletion-requested')
    current_destroyers = 0
    num_not_run = 0

    logger.info('Found %d infrastructures to delete', len(infras))

    for infra in infras:
        if current_destroyers + 1 < int(CONFIG.get('pool', 'deleters')):
            logger.info('Running destroyer for infra %s', infra['id'])
            executor.submit(destroyer.destroyer, infra['id'])
            current_destroyers += 1
        else:
            num_not_run += 1

    if num_not_run > 0:
        logger.info('Not running %d destroyers as we already have enough', num_not_run)

if __name__ == "__main__":
    signal.signal(signal.SIGTERM, handle_signal)

    executor_deployers = ProcessPoolExecutor(int(CONFIG.get('pool', 'deployers')))
    executor_deleters = ProcessPoolExecutor(int(CONFIG.get('pool', 'deleters')))

    while True:
        if EXIT_NOW:
            logger.info('Exiting')
            exit(0)
 
        db = database.get_db()
        if db.connect():
            find_new_infra_for_deletion(db, executor_deployers)
            find_new_infra_for_creation(db, executor_deleters)
            db.close()

        time.sleep(30)

